<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Pest Mavericks Dashboard</title>
  <link rel='stylesheet' href='/wp-includes/css/dist/block-library/style.min.css_ver=6.8.2.css' />
  <link rel='stylesheet' href='/wp-content/themes/garageup/build/main.css_ver=b6dc510ac89b6f088fb6.css' />
  <link rel='stylesheet' href='/wp-content/themes/garageup/build/nav-overrides.css' />
  <style>
    		:root { 
    			--brand-blue: #0B1F2C !important; /* Pest Mavericks navy */
    			--brand-lime: #D62828 !important; /* Pest Mavericks red */
    			--brand-red: var(--brand-lime) !important; 
    			--brand-yellow: var(--brand-lime) !important; 
    		}
    html, body { height: 100%; }
    /* Dashboard canvas: subtle green tint to match brand */
    body.dashboard-page { background: color-mix(in srgb, var(--brand-blue) 6%, #ffffff 94%); }
    .dashboard { min-height: 100vh; }
    .dashboard .row { min-height: 100vh; }
    .dashboard aside { position: sticky; top: 0; height: 100vh; overflow: auto; }
    .dashboard .list-group { border-radius: 14px; overflow: hidden; box-shadow: 0 8px 18px rgba(0,0,0,.08); }
    .dashboard .list-group-item { border: 0; border-bottom: 1px solid #eee; }
    .dashboard .list-group-item.active, .dashboard .list-group-item:hover {
      background: color-mix(in srgb, var(--brand-blue) 12%, #fff 88%);
      color: var(--brand-blue);
      border-left: 4px solid var(--brand-blue);
    }
    .dashboard .dash-link { text-decoration: none; color: inherit; display: block; }
    .dashboard .content-col { max-height: 100vh; overflow: auto; }
    /* Cards */
    .dashboard .card { background: #fff; border: none; border-radius: 14px; box-shadow: 0 8px 18px rgba(0,0,0,.12); }
    /* Force blue header, even when theme adds bg-light */
    .dashboard .card > .card-header,
    .dashboard .card > .card-header.bg-light { background: var(--brand-blue) !important; color: #fff !important; }
    .dashboard .card > .card-header .h5, 
    .dashboard .card > .card-header h2, 
    .dashboard .card > .card-header span { color: #fff !important; }
    .dashboard .card > .card-header .text-muted { opacity: .85; }
    .dashboard .card > .card-header .btn,
    .dashboard .card > .card-header a.btn,
    .dashboard .card > .card-header .btn.btn-outline-secondary {
      border-color: #fff !important; color: #fff !important; background: transparent !important;
    }
    .dashboard .card > .card-header .btn:hover,
    .dashboard .card > .card-header a.btn:hover,
    .dashboard .card > .card-header .btn.btn-outline-secondary:hover {
      background: #fff !important; color: var(--brand-blue) !important; border-color: #fff !important;
    }
    .dashboard .card > .card-body { background: #fff; }

    /* Toasts */
    .toast-container { position: fixed; right: 16px; bottom: 16px; z-index: 9999; display: flex; flex-direction: column; gap: 10px; }
    .toast { color: #fff; padding: 10px 14px; border-radius: 8px; box-shadow: 0 6px 20px rgba(0,0,0,.15); opacity: 0; transform: translateY(10px); transition: opacity .2s ease, transform .2s ease; font-size: 14px; }
    .toast.show { opacity: 1; transform: translateY(0); }
    .toast.success { background: #198754; }
    .toast.error { background: #dc3545; }
    .toast.info { background: #0d6efd; }
    .toast.warn { background: #fd7e14; }
  </style>
  <link rel="icon" href="/pictures/favicon/pest-mavericks/favicon-32x32.png" sizes="32x32" />
</head>
<body class="dashboard-page">
  <main>
    <section class="dashboard py-4">
      <div class="container-fluid">
        <div class="row">
          <!-- Sidebar -->
          <aside class="col-12 col-md-3 col-lg-2 mb-4 mb-md-0">
            <nav class="card shadow-sm border-0" style="border-radius: 10px; overflow: hidden;">
              <div class="card-header" style="background: var(--brand-blue); color: #fff;">
                <h3 class="my-2" style="font-size: 1.1rem; letter-spacing: .02em;">Admin Panel</h3>
              </div>
              <ul class="list-group list-group-flush">
                <li class="list-group-item <%= section === 'home' ? 'active' : '' %>"><a class="dash-link" href="/dashboard/home">Overview</a></li>
                <li class="list-group-item <%= section === 'homepage' ? 'active' : '' %>"><a class="dash-link" href="/dashboard/homepage">Homepage</a></li>
                <li class="list-group-item <%= section === 'about' ? 'active' : '' %>"><a class="dash-link" href="/dashboard/about">About Us</a></li>
                <li class="list-group-item <%= section === 'blog' ? 'active' : '' %>"><a class="dash-link" href="/dashboard/blog">Blog</a></li>
                <li class="list-group-item <%= section === 'contact' ? 'active' : '' %>"><a class="dash-link" href="/dashboard/contact">Contact Us</a></li>
              </ul>
              <div class="card-body">
                <button id="logoutBtn" class="btn w-100" style="background: var(--brand-blue); color: #fff;">Logout</button>
              </div>
            </nav>
          </aside>

          <!-- Main content -->
          <div class="col-12 col-md-9 col-lg-10 content-col">
            <div class="card shadow-sm border-0" style="border-radius: 10px; overflow: hidden;">
              <div class="card-header bg-light d-flex align-items-center justify-content-between">
                <h2 class="h5 my-2">Dashboard <span class="text-muted">/ <%= section %></span></h2>
                <a class="btn btn-sm btn-outline-secondary" href="/" target="_blank">View Site</a>
              </div>
              <div class="card-body">
                <% if (section === 'home') { %>
                  <p class="mb-0">Welcome to your dashboard. Choose a section on the left to begin editing content.</p>
                <% } else if (section === 'homepage') { %>
                  <form id="homepageForm" class="row g-3" method="post">
                    <div class="col-12">
                      <h3 class="h6">Top Scroller</h3>
                    </div>
                    <div class="col-12">
                      <label class="form-label">Scroller Text</label>
                      <input type="text" name="scrollerText" class="form-control" value="<%= (homepage && homepage.scrollerText) || '' %>" />
                    </div>
                    <div class="col-12">
                      <h3 class="h6">Hero</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Title</label>
                      <input type="text" name="heroTitle" class="form-control" value="<%= (homepage && homepage.heroTitle) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Subtitle</label>
                      <input type="text" name="heroSubtitle" class="form-control" value="<%= (homepage && homepage.heroSubtitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Hero Background Image URL</label>
                      <input type="text" name="heroBg" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (homepage && homepage.heroBg) || '' %>" />
                    </div>
                    <div class="col-12">
                      <div class="d-flex align-items-center gap-3 mt-1">
                        <input type="file" id="heroBgFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="heroBgUploadStatus" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="heroBgPreview" src="<%= (homepage && homepage.heroBg) || '' %>" alt="Hero background preview" style="max-height: 120px; border-radius: 6px;" <%= (homepage && homepage.heroBg) ? '' : 'hidden' %> />
                      </div>
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Who We Are</h3>
                    </div>
                    <div class="col-12 mt-3">
                      <label class="form-label">Image URL</label>
                      <input type="text" name="whoWeAreImage" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (homepage && homepage.whoWeAreImage) || '' %>" />
                    </div>
                    <div class="col-12">
                      <div class="d-flex align-items-center gap-3 mt-1">
                        <input type="file" id="whoWeAreImageFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="whoWeAreImageStatus" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="whoWeAreImagePreview" src="<%= (homepage && homepage.whoWeAreImage) || '' %>" alt="Who we are image preview" style="max-height: 120px; border-radius: 6px;" <%= (homepage && homepage.whoWeAreImage) ? '' : 'hidden' %> />
                      </div>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Section Title</label>
                      <input type="text" name="whoWeAreTitle" class="form-control" value="<%= (homepage && homepage.whoWeAreTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Body</label>
                      <textarea name="whoWeAreBody" class="form-control" rows="4"><%= (homepage && homepage.whoWeAreBody) || '' %></textarea>
                    </div>

                    <div class="col-md-6">
                      <label class="form-label">CTA Label</label>
                      <input type="text" name="ctaLabel" class="form-control" value="<%= (homepage && homepage.ctaLabel) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA URL</label>
                      <input type="text" name="ctaUrl" class="form-control" placeholder="/contact or https://example.com/contact" value="<%= (homepage && homepage.ctaUrl) || '' %>" />
                    </div>

                    <div class="col-12 mt-4">
                      <h3 class="h6">Services</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Services Title</label>
                      <input type="text" name="servicesTitle" class="form-control" value="<%= (homepage && homepage.servicesTitle) || '' %>" />
                    </div>
                    <!-- Featured Services -->
                    <% for (let i = 1; i <= 4; i++) { %>
                      <div class="col-12 mt-2">
                        <h4 class="h6 mb-1">Featured Service <%= i %></h4>
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Title</label>
                        <input type="text" name="featuredService<%= i %>Title" class="form-control" value="<%= (homepage && homepage[`featuredService${i}Title`]) || '' %>" />
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Link URL</label>
                        <input type="text" name="featuredService<%= i %>Url" class="form-control" placeholder="/services/..." value="<%= (homepage && homepage[`featuredService${i}Url`]) || '' %>" />
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Image URL</label>
                        <input type="text" name="featuredService<%= i %>Image" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (homepage && homepage[`featuredService${i}Image`]) || '' %>" />
                      </div>
                      <div class="col-12">
                        <div class="d-flex align-items-center gap-3 mt-1">
                          <input type="file" id="fs<%= i %>ImageFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                          <span id="fs<%= i %>ImageStatus" class="text-muted"></span>
                        </div>
                        <div class="mt-2">
                          <img id="fs<%= i %>ImagePreview" src="<%= (homepage && homepage[`featuredService${i}Image`]) || '' %>" alt="Featured service <%= i %> preview" style="max-height: 120px; border-radius: 6px;" <%= (homepage && homepage[`featuredService${i}Image`]) ? '' : 'hidden' %> />
                        </div>
                      </div>
                    <% } %>

                    <!-- Services: Pills/Quick Links -->
                    <div class="col-12 mt-3">
                      <h4 class="h6 mb-2">Service Pills</h4>
                      <p class="text-muted" style="font-size: .9rem;">Configure up to 6 quick-link buttons.</p>
                    </div>
                    <% for (let i = 1; i <= 6; i++) { %>
                      <div class="col-md-6">
                        <label class="form-label">Service Pill <%= i %> Label</label>
                        <input type="text" name="servicesBtn<%= i %>Label" class="form-control" value="<%= (homepage && homepage[`servicesBtn${i}Label`]) || '' %>" />
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Service Pill <%= i %> URL</label>
                        <input type="text" name="servicesBtn<%= i %>Url" class="form-control" placeholder="/services/... or https://..." value="<%= (homepage && homepage[`servicesBtn${i}Url`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 mt-4">
                      <h3 class="h6">Quick Facts</h3>
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">Locations (Number)</label>
                      <input type="text" name="quickLocations" class="form-control" value="<%= (homepage && homepage.quickLocations) || '' %>" />
                      <label class="form-label mt-2">Locations (Label)</label>
                      <input type="text" name="quickLocationsLabel" class="form-control" placeholder="LOCATIONS" value="<%= (homepage && homepage.quickLocationsLabel) || '' %>" />
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">Jobs Completed (Number)</label>
                      <input type="text" name="quickJobs" class="form-control" value="<%= (homepage && homepage.quickJobs) || '' %>" />
                      <label class="form-label mt-2">Jobs Completed (Label)</label>
                      <input type="text" name="quickJobsLabel" class="form-control" placeholder="JOBS COMPLETED" value="<%= (homepage && homepage.quickJobsLabel) || '' %>" />
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">States We're In (Number)</label>
                      <input type="text" name="quickStates" class="form-control" value="<%= (homepage && homepage.quickStates) || '' %>" />
                      <label class="form-label mt-2">States We're In (Label)</label>
                      <input type="text" name="quickStatesLabel" class="form-control" placeholder="STATES WE'RE IN" value="<%= (homepage && homepage.quickStatesLabel) || '' %>" />
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">5 Star Reviews (Number)</label>
                      <input type="text" name="quickReviews" class="form-control" value="<%= (homepage && homepage.quickReviews) || '' %>" />
                      <label class="form-label mt-2">5 Star Reviews (Label)</label>
                      <input type="text" name="quickReviewsLabel" class="form-control" placeholder="5 STAR REVIEWS" value="<%= (homepage && homepage.quickReviewsLabel) || '' %>" />
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">Estimates Available (Number)</label>
                      <input type="text" name="quickEstimates" class="form-control" value="<%= (homepage && homepage.quickEstimates) || '' %>" />
                      <label class="form-label mt-2">Estimates Available (Label)</label>
                      <input type="text" name="quickEstimatesLabel" class="form-control" placeholder="ESTIMATES AVAILABLE" value="<%= (homepage && homepage.quickEstimatesLabel) || '' %>" />
                    </div>
                    <div class="col-md-4">
                      <label class="form-label">Possibilities (Number/Text)</label>
                      <input type="text" name="quickPossibilities" class="form-control" value="<%= (homepage && homepage.quickPossibilities) || '' %>" />
                      <label class="form-label mt-2">Possibilities (Label)</label>
                      <input type="text" name="quickPossibilitiesLabel" class="form-control" placeholder="POSSIBILITIES" value="<%= (homepage && homepage.quickPossibilitiesLabel) || '' %>" />
                    </div>

                    <div class="col-12 mt-4">
                      <h3 class="h6">Blog Section</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Blog Kicker</label>
                      <input type="text" name="blogKicker" class="form-control" value="<%= (homepage && homepage.blogKicker) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Blog Title</label>
                      <input type="text" name="blogTitle" class="form-control" value="<%= (homepage && homepage.blogTitle) || '' %>" />
                    </div>

                    <!-- Featured Posts (3 cards) -->
                    <div class="col-12 mt-2">
                      <h4 class="h6 mb-2">Featured Posts</h4>
                    </div>
                    <% for (let i = 1; i <= 3; i++) { %>
                      <div class="col-12 mt-1">
                        <h5 class="h6">Post <%= i %></h5>
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Post <%= i %> Title</label>
                        <input type="text" name="blogFeat<%= i %>Title" class="form-control" value="<%= (homepage && homepage[`blogFeat${i}Title`]) || '' %>" />
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Post <%= i %> URL</label>
                        <input type="text" name="blogFeat<%= i %>Url" class="form-control" placeholder="/blog/... or https://..." value="<%= (homepage && homepage[`blogFeat${i}Url`]) || '' %>" />
                      </div>
                      <div class="col-md-8">
                        <label class="form-label">Post <%= i %> Image URL</label>
                        <input type="text" name="blogFeat<%= i %>Image" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (homepage && homepage[`blogFeat${i}Image`]) || '' %>" />
                        <div class="d-flex align-items-center gap-3 mt-2">
                          <input type="file" id="blogFeat<%= i %>ImageFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                          <span id="blogFeat<%= i %>ImageStatus" class="text-muted"></span>
                        </div>
                        <div class="mt-2">
                          <img id="blogFeat<%= i %>ImagePreview" src="<%= (homepage && homepage[`blogFeat${i}Image`]) || '' %>" alt="Featured post <%= i %> image preview" style="max-height: 120px; border-radius: 6px;" <%= (homepage && homepage[`blogFeat${i}Image`]) ? '' : 'hidden' %> />
                        </div>
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Post <%= i %> Excerpt</label>
                        <input type="text" name="blogFeat<%= i %>Excerpt" class="form-control" value="<%= (homepage && homepage[`blogFeat${i}Excerpt`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 mt-4">
                      <h3 class="h6">Warranty</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Warranty Title</label>
                      <input type="text" name="warrantyTitle" class="form-control" value="<%= (homepage && homepage.warrantyTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Warranty Body</label>
                      <textarea name="warrantyBody" class="form-control" rows="3"><%= (homepage && homepage.warrantyBody) || '' %></textarea>
                    </div>

                    <div class="col-12 mt-4">
                      <h3 class="h6">Get Started</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Title</label>
                      <input type="text" name="getStartedTitle" class="form-control" value="<%= (homepage && homepage.getStartedTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Body</label>
                      <textarea name="getStartedBody" class="form-control" rows="2"><%= (homepage && homepage.getStartedBody) || '' %></textarea>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Label</label>
                      <input type="text" name="getStartedCtaLabel" class="form-control" value="<%= (homepage && homepage.getStartedCtaLabel) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA URL</label>
                      <input type="text" name="getStartedCtaUrl" class="form-control" placeholder="/contact or https://example.com/contact" value="<%= (homepage && homepage.getStartedCtaUrl) || '' %>" />
                    </div>

                    <!-- Reviews -->
                    <div class="col-12 mt-4">
                      <h3 class="h6">Reviews</h3>
                      <p class="text-muted" style="font-size: .9rem;">Configure up to 3 reviews (text and author).</p>
                    </div>
                    <% for (let i = 1; i <= 3; i++) { %>
                      <div class="col-12 mt-1">
                        <h5 class="h6">Review <%= i %></h5>
                      </div>
                      <div class="col-md-8">
                        <label class="form-label">Review <%= i %> Text</label>
                        <textarea name="review<%= i %>Text" class="form-control" rows="2"><%= (homepage && homepage[`review${i}Text`]) || '' %></textarea>
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Review <%= i %> Author</label>
                        <input type="text" name="review<%= i %>Author" class="form-control" value="<%= (homepage && homepage[`review${i}Author`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 d-flex gap-2 mt-2">
                      <button type="submit" class="btn btn-primary" style="background: var(--brand-blue); color: #fff; border-color: var(--brand-blue);">Save</button>
                      <span id="homepageStatus" class="text-muted"></span>
                    </div>
                  </form>
                <% } else if (section === 'about') { %>
                  <form id="aboutForm" class="row g-3" method="post">
                    <div class="col-12">
                      <h3 class="h6">Hero</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Title</label>
                      <input type="text" name="heroTitle" class="form-control" value="<%= (about && about.heroTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Hero Background Image URL</label>
                      <input type="text" name="heroBg" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (about && about.heroBg) || '' %>" />
                      <div class="d-flex align-items-center gap-3 mt-2">
                        <input type="file" id="aboutHeroBgFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="aboutHeroBgStatus" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="aboutHeroBgPreview" src="<%= (about && about.heroBg) || '' %>" alt="About hero bg preview" style="max-height: 120px; border-radius: 6px;" <%= (about && about.heroBg) ? '' : 'hidden' %> />
                      </div>
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Intro / Our Story</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Intro Title</label>
                      <input type="text" name="introTitle" class="form-control" value="<%= (about && about.introTitle) || '' %>" />

                    <div class="col-12 mt-4">
                      <h3 class="h6">Core Values</h3>
                    </div>
                    <div class="col-12">
                      <label class="form-label">Core Values Title</label>
                      <input type="text" name="coreValuesTitle" class="form-control" value="<%= (about && about.coreValuesTitle) || '' %>" />
                    </div>
                    <% for (let i = 1; i <= 3; i++) { %>
                      <div class="col-12 mt-2">
                        <h4 class="h6 mb-1">Core Value <%= i %></h4>
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Icon URL (optional)</label>
                        <input type="text" name="coreValue<%= i %>Icon" class="form-control" placeholder="/wp-content/uploads/... or leave blank for built‑in icon" value="<%= (about && about[`coreValue${i}Icon`]) || '' %>" />
                        <div class="d-flex align-items-center gap-3 mt-2">
                          <input type="file" id="coreValue<%= i %>IconFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                          <span id="coreValue<%= i %>IconStatus" class="text-muted"></span>
                        </div>
                        <div class="mt-2">
                          <img id="coreValue<%= i %>IconPreview" src="<%= (about && about[`coreValue${i}Icon`]) || '' %>" alt="Icon preview" style="max-height: 60px; border-radius: 6px; background: #f8f9fa; padding: 6px;" <%= (about && about[`coreValue${i}Icon`]) ? '' : 'hidden' %> />
                        </div>
                        <small class="text-muted d-block mt-1">If left blank, a white inline SVG icon will be used.</small>
                      </div>

                      <div class="col-md-4">
                        <label class="form-label">Title</label>
                        <input type="text" name="coreValue<%= i %>Title" class="form-control" value="<%= (about && about[`coreValue${i}Title`]) || '' %>" />
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Body</label>
                        <input type="text" name="coreValue<%= i %>Body" class="form-control" value="<%= (about && about[`coreValue${i}Body`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12">
                      <label class="form-label">Right Image URL (single large image)</label>
                      <input type="text" name="coreRightImage1" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (about && about.coreRightImage1) || '' %>" />
                      <div class="d-flex align-items-center gap-3 mt-2">
                        <input type="file" id="coreRightImage1File" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="coreRightImage1Status" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="coreRightImage1Preview" src="<%= (about && about.coreRightImage1) || '' %>" alt="Right image 1 preview" style="max-height: 120px; border-radius: 6px;" <%= (about && about.coreRightImage1) ? '' : 'hidden' %> />
                      </div>
                      <small class="text-muted d-block mt-1">Only one image is used in this section.</small>
                    </div>

                    <div class="col-12 mt-4">
                      <h3 class="h6">The Swim Studs Way</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Section Title</label>
                      <input type="text" name="wayTitle" class="form-control" value="<%= (about && about.wayTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Body</label>
                      <textarea name="wayBody" class="form-control" rows="3"><%= (about && about.wayBody) || '' %></textarea>
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Promises</h3>
                    </div>
                    <% for (let i = 1; i <= 4; i++) { %>
                      <div class="col-12 mt-1">
                        <h5 class="h6">Promise <%= i %></h5>
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Title</label>
                        <input type="text" name="promise<%= i %>Title" class="form-control" value="<%= (about && about[`promise${i}Title`]) || '' %>" />
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Body</label>
                        <input type="text" name="promise<%= i %>Body" class="form-control" value="<%= (about && about[`promise${i}Body`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 mt-4">
                      <h3 class="h6">CTA</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Title</label>
                      <input type="text" name="ctaTitle" class="form-control" value="<%= (about && about.ctaTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">CTA Body</label>
                      <textarea name="ctaBody" class="form-control" rows="2"><%= (about && about.ctaBody) || '' %></textarea>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Button Label</label>
                      <input type="text" name="ctaLabel" class="form-control" value="<%= (about && about.ctaLabel) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA URL</label>
                      <input type="text" name="ctaUrl" class="form-control" placeholder="/contact-us or https://..." value="<%= (about && about.ctaUrl) || '' %>" />
                    </div>

                    <div class="col-12 d-flex gap-2 mt-2">
                      <button type="submit" class="btn btn-primary">Save</button>
                      <span id="aboutStatus" class="text-muted"></span>
                    </div>
                  </form>
                <% } else if (section === 'contact') { %>
                  <form id="contactPageForm" class="row g-3" method="post">
                    <div class="col-12">
                      <h3 class="h6">Hero</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Title</label>
                      <input type="text" name="heroTitle" class="form-control" value="<%= (contact && contact.heroTitle) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Subtitle</label>
                      <input type="text" name="heroSubtitle" class="form-control" value="<%= (contact && contact.heroSubtitle) || '' %>" />
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Left Panel</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Left Title</label>
                      <input type="text" name="leftTitle" class="form-control" value="<%= (contact && contact.leftTitle) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Left Subtitle</label>
                      <input type="text" name="leftSubtitle" class="form-control" value="<%= (contact && contact.leftSubtitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Left Background Image URL</label>
                      <input type="text" name="leftBg" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (contact && contact.leftBg) || '' %>" />
                      <div class="d-flex align-items-center gap-3 mt-2">
                        <input type="file" id="contactLeftBgFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="contactLeftBgStatus" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="contactLeftBgPreview" src="<%= (contact && contact.leftBg) || '' %>" alt="Left bg preview" style="max-height: 120px; border-radius: 6px;" <%= (contact && contact.leftBg) ? '' : 'hidden' %> />
                      </div>
                    </div>
                    <% for (let i = 1; i <= 6; i++) { %>
                      <div class="col-md-4">
                        <label class="form-label">Bullet <%= i %></label>
                        <input type="text" name="bullet<%= i %>" class="form-control" value="<%= (contact && contact[`bullet${i}`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Right Panel</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Right Title</label>
                      <input type="text" name="rightTitle" class="form-control" value="<%= (contact && contact.rightTitle) || '' %>" />
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Bottom Form Title</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Bottom Title</label>
                      <input type="text" name="bottomTitle" class="form-control" value="<%= (contact && contact.bottomTitle) || '' %>" />
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Reviews Section</h3>
                    </div>
                    <div class="col-12">
                      <label class="form-label">Section Title</label>
                      <input type="text" name="reviewsTitle" class="form-control" value="<%= (contact && contact.reviewsTitle) || '' %>" />
                    </div>
                    <% for (let i = 1; i <= 3; i++) { %>
                      <div class="col-12 mt-2">
                        <h4 class="h6 mb-1">Review <%= i %></h4>
                      </div>
                      <div class="col-md-8">
                        <label class="form-label">Review <%= i %> Text</label>
                        <textarea name="review<%= i %>Text" class="form-control" rows="2"><%= (contact && contact[`review${i}Text`]) || '' %></textarea>
                      </div>
                      <div class="col-md-4">
                        <label class="form-label">Review <%= i %> Author</label>
                        <input type="text" name="review<%= i %>Author" class="form-control" value="<%= (contact && contact[`review${i}Author`]) || '' %>" />
                      </div>
                    <% } %>

                    <div class="col-12 mt-3">
                      <h3 class="h6">CTA</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Title</label>
                      <input type="text" name="ctaTitle" class="form-control" value="<%= (contact && contact.ctaTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">CTA Body</label>
                      <textarea name="ctaBody" class="form-control" rows="2"><%= (contact && contact.ctaBody) || '' %></textarea>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Button Label</label>
                      <input type="text" name="ctaLabel" class="form-control" value="<%= (contact && contact.ctaLabel) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA URL</label>
                      <input type="text" name="ctaUrl" class="form-control" placeholder="/contact-us or https://..." value="<%= (contact && contact.ctaUrl) || '' %>" />
                    </div>

                    <div class="col-12 d-flex gap-2 mt-2">
                      <button type="submit" class="btn btn-primary">Save</button>
                      <span id="contactPageStatus" class="text-muted"></span>
                    </div>
                  </form>
                <% } else if (section === 'pages') { %>
                  <h3 class="h6">Pages</h3>
                  <p class="text-muted">Page editor coming soon.</p>
                <% } else if (section === 'services') { %>
                  <h3 class="h6">Services</h3>
                  <p class="text-muted">Service editor coming soon.</p>
                <% } else if (section === 'blog') { %>
                  <form id="blogForm" class="row g-3" method="post">
                    <div class="col-12">
                      <h3 class="h6">Hero</h3>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">Hero Title</label>
                      <input type="text" name="heroTitle" class="form-control" value="<%= (blog && blog.heroTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">Hero Background Image URL</label>
                      <input type="text" name="heroBg" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (blog && blog.heroBg) || '' %>" />
                      <div class="d-flex align-items-center gap-3 mt-2">
                        <input type="file" id="blogHeroBgFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                        <span id="blogHeroBgStatus" class="text-muted"></span>
                      </div>
                      <div class="mt-2">
                        <img id="blogHeroBgPreview" src="<%= (blog && blog.heroBg) || '' %>" alt="Blog hero bg preview" style="max-height: 120px; border-radius: 6px;" <%= (blog && blog.heroBg) ? '' : 'hidden' %> />
                      </div>
                    </div>

                    <div class="col-12 mt-3">
                      <h3 class="h6">Posts</h3>
                      <p class="text-muted" style="font-size: .9rem;">Manage up to 12 posts shown on the archive.</p>
                    </div>
                    <% for (let i = 1; i <= 12; i++) { %>
                      <div class="col-12 mt-2"><h4 class="h6 mb-1">Post <%= i %></h4></div>
                      <div class="col-md-6">
                        <label class="form-label">Title</label>
                        <input type="text" name="post<%= i %>Title" class="form-control" value="<%= (blog && blog[`post${i}Title`]) || '' %>" />
                      </div>
                      <div class="col-md-3">
                        <label class="form-label">Category</label>
                        <input type="text" name="post<%= i %>Category" class="form-control" value="<%= (blog && blog[`post${i}Category`]) || '' %>" />
                      </div>
                      <div class="col-md-3">
                        <label class="form-label">Read Time</label>
                        <input type="text" name="post<%= i %>ReadMin" class="form-control" placeholder="e.g. 4 MIN" value="<%= (blog && blog[`post${i}ReadMin`]) || '' %>" />
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">URL</label>
                        <input type="text" name="post<%= i %>Url" class="form-control" placeholder="/blog/... or https://..." value="<%= (blog && blog[`post${i}Url`]) || '' %>" />
                      </div>
                      <div class="col-md-6">
                        <label class="form-label">Image URL</label>
                        <input type="text" name="post<%= i %>Image" class="form-control" placeholder="https://... or /wp-content/uploads/..." value="<%= (blog && blog[`post${i}Image`]) || '' %>" />
                        <div class="d-flex align-items-center gap-3 mt-2">
                          <input type="file" id="post<%= i %>ImageFile" accept="image/*" class="form-control" style="max-width: 320px;" />
                          <span id="post<%= i %>ImageStatus" class="text-muted"></span>
                        </div>
                        <div class="mt-2">
                          <img id="post<%= i %>ImagePreview" src="<%= (blog && blog[`post${i}Image`]) || '' %>" alt="Post <%= i %> image preview" style="max-height: 120px; border-radius: 6px;" <%= (blog && blog[`post${i}Image`]) ? '' : 'hidden' %> />
                        </div>
                      </div>
                      <div class="col-12">
                        <label class="form-label">Excerpt</label>
                        <textarea name="post<%= i %>Excerpt" class="form-control" rows="2"><%= (blog && blog[`post${i}Excerpt`]) || '' %></textarea>
                      </div>
                      <div class="col-12">
                        <label class="form-label">Body</label>
                        <textarea name="post<%= i %>Body" class="form-control" rows="8" placeholder="Write your post here. No HTML needed—line breaks become paragraphs."><%= (blog && blog[`post${i}Body`]) || '' %></textarea>
                        <small class="text-muted">No HTML required. We will auto-format your text into paragraphs and lists.</small>
                      </div>
                    <% } %>

                    <div class="col-12 mt-4"><h3 class="h6">CTA</h3></div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Title</label>
                      <input type="text" name="ctaTitle" class="form-control" value="<%= (blog && blog.ctaTitle) || '' %>" />
                    </div>
                    <div class="col-12">
                      <label class="form-label">CTA Body</label>
                      <textarea name="ctaBody" class="form-control" rows="2"><%= (blog && blog.ctaBody) || '' %></textarea>
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA Button Label</label>
                      <input type="text" name="ctaLabel" class="form-control" value="<%= (blog && blog.ctaLabel) || '' %>" />
                    </div>
                    <div class="col-md-6">
                      <label class="form-label">CTA URL</label>
                      <input type="text" name="ctaUrl" class="form-control" placeholder="/contact-us or https://..." value="<%= (blog && blog.ctaUrl) || '' %>" />
                    </div>

                    <div class="col-12 d-flex gap-2 mt-2">
                      <button type="submit" class="btn btn-primary">Save</button>
                      <span id="blogStatus" class="text-muted"></span>
                    </div>
                  </form>
                <% } else if (section === 'settings') { %>
                  <h3 class="h6">Settings</h3>
                  <p class="text-muted">Site settings coming soon.</p>
                <% } else { %>
                  <p class="text-muted">Unknown section.</p>
                <% } %>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>

  <!-- Toast container -->
  <div id="toastContainer" class="toast-container"></div>

  <script>
    (function(){
      // Toast helper
      function showToast(message, type) {
        try {
          const container = document.getElementById('toastContainer');
          if (!container) return;
          const t = document.createElement('div');
          t.className = 'toast ' + (type || 'info');
          t.textContent = message || '';
          container.appendChild(t);
          // trigger animation
          requestAnimationFrame(() => t.classList.add('show'));
          // auto-hide
          setTimeout(() => { t.classList.remove('show'); }, 2200);
          setTimeout(() => { t.remove(); }, 2600);
        } catch (_) {}
      }
      // Boot log to verify script execution
      try { console.log('[dashboard] script loaded'); } catch (_) {}

      // Global error handler to surface JS errors that may stop execution
      try {
        window.addEventListener('error', function(e){
          try { console.error('[dashboard] JS error:', e.message, e.filename, e.lineno, e.colno); } catch(_) {}
          const statusEl = document.getElementById('homepageStatus');
          if (statusEl && !statusEl.textContent) {
            statusEl.textContent = 'Script error: ' + (e && e.message ? e.message : 'unknown error');
          }
        });
        window.addEventListener('unhandledrejection', function(e){
          try { console.error('[dashboard] unhandled rejection:', e.reason); } catch(_) {}
          const statusEl = document.getElementById('homepageStatus');
          if (statusEl && !statusEl.textContent) {
            statusEl.textContent = 'Unhandled error saving: ' + (e && e.reason && (e.reason.message || e.reason) || 'unknown');
          }
        });
      } catch (_) {}
      // Wrap fetch to log auth failures (do not auto-redirect)
      if (window.fetch && !window.__fetchAuthWrapped) {
        const origFetch = window.fetch.bind(window);
        window.fetch = async function() {
          const res = await origFetch.apply(null, arguments);
          if (res && (res.status === 401 || res.status === 403)) {
            try { console.warn('[dashboard] auth expired during request:', arguments && arguments[0]); } catch(_) {}
            // Do not redirect here; let callers handle so UI can show a message first
          }
          return res;
        };
        window.__fetchAuthWrapped = true;
      }

      // --- About page: hydrate, save, and image wiring ---
      const aboutForm = document.getElementById('aboutForm');

      function setPreview(previewEl, url) {
        if (!previewEl) return;
        if (url && String(url).trim().length) {
          previewEl.src = url;
          previewEl.hidden = false;
        }
      }

      async function hydrateAboutFromApi() {
        if (!aboutForm) return;
        try {
          const res = await fetch('/api/about', { credentials: 'same-origin' });
          if (!res.ok) return;
          const data = await res.json();
          const fields = aboutForm.querySelectorAll('input[name], textarea[name]');
          fields.forEach(function(el){
            const key = el.getAttribute('name');
            if (!key) return;
            if (Object.prototype.hasOwnProperty.call(data, key)) {
              const val = data[key];
              el.value = (val != null ? String(val) : '');
            }
          });
          setPreview(document.getElementById('aboutHeroBgPreview'), data.heroBg);
          setPreview(document.getElementById('introImage1Preview'), data.introImage1);
          setPreview(document.getElementById('introImage2Preview'), data.introImage2);
          setPreview(document.getElementById('coreRightImage1Preview'), data.coreRightImage1);
          setPreview(document.getElementById('coreRightImage2Preview'), data.coreRightImage2);
        } catch (e) {
          // silent
        }
      }

      async function saveAboutPartial(patch, statusEl) {
        try {
          statusEl && (statusEl.textContent = 'Saving...');
          const res = await fetch('/api/about', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(patch || {})
          });
          if (res.status === 401 || res.status === 403) {
            statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
            setTimeout(() => { window.location.href = '/admin-login'; }, 800);
            return null;
          }
          if (!res.ok) throw new Error('Save failed: ' + res.status);
          const result = await res.json();
          statusEl && (statusEl.textContent = 'Saved');
          setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1200);
          showToast('Changes saved', 'success');
          return result;
        } catch (e) {
          console.error('[dashboard] about partial save failed', e);
          statusEl && (statusEl.textContent = 'Error saving');
          showToast('Save failed', 'error');
          return null;
        }
      }

      // Image wiring for About page fields
      const aboutHeroFile = document.getElementById('aboutHeroBgFile');
      const aboutHeroStatus = document.getElementById('aboutHeroBgStatus');
      const aboutHeroUrlInput = document.querySelector('#aboutForm input[name="heroBg"]');
      const aboutHeroPreview = document.getElementById('aboutHeroBgPreview');
      if (aboutForm) wireImageField({ fileEl: aboutHeroFile, urlInputEl: aboutHeroUrlInput, previewEl: aboutHeroPreview, statusEl: aboutHeroStatus, payloadKey: 'heroBg' });

      const i1f = document.getElementById('introImage1File');
      const i1s = document.getElementById('introImage1Status');
      const i1u = document.querySelector('#aboutForm input[name="introImage1"]');
      const i1p = document.getElementById('introImage1Preview');
      if (aboutForm) wireImageField({ fileEl: i1f, urlInputEl: i1u, previewEl: i1p, statusEl: i1s, payloadKey: 'introImage1' });

      const i2f = document.getElementById('introImage2File');
      const i2s = document.getElementById('introImage2Status');
      const i2u = document.querySelector('#aboutForm input[name="introImage2"]');
      const i2p = document.getElementById('introImage2Preview');
      if (aboutForm) wireImageField({ fileEl: i2f, urlInputEl: i2u, previewEl: i2p, statusEl: i2s, payloadKey: 'introImage2' });

      const cr1f = document.getElementById('coreRightImage1File');
      const cr1s = document.getElementById('coreRightImage1Status');
      const cr1u = document.querySelector('#aboutForm input[name="coreRightImage1"]');
      const cr1p = document.getElementById('coreRightImage1Preview');
      if (aboutForm) wireImageField({ fileEl: cr1f, urlInputEl: cr1u, previewEl: cr1p, statusEl: cr1s, payloadKey: 'coreRightImage1' });

      const cr2f = document.getElementById('coreRightImage2File');
      const cr2s = document.getElementById('coreRightImage2Status');
      const cr2u = document.querySelector('#aboutForm input[name="coreRightImage2"]');
      const cr2p = document.getElementById('coreRightImage2Preview');
      if (aboutForm) wireImageField({ fileEl: cr2f, urlInputEl: cr2u, previewEl: cr2p, statusEl: cr2s, payloadKey: 'coreRightImage2' });

      for (let i = 1; i <= 3; i++) {
        const f = document.getElementById(`coreValue${i}IconFile`);
        const s = document.getElementById(`coreValue${i}IconStatus`);
        const u = document.querySelector(`#aboutForm input[name="coreValue${i}Icon"]`);
        if (aboutForm) wireImageField({ fileEl: f, urlInputEl: u, previewEl: null, statusEl: s, payloadKey: `coreValue${i}Icon` });
      }

      if (aboutForm) {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', hydrateAboutFromApi);
        } else {
          hydrateAboutFromApi();
        }
        aboutForm.addEventListener('submit', async function(ev){
          ev.preventDefault();
          const fd = new FormData(aboutForm);
          const raw = Object.fromEntries(fd.entries());
          const data = {};
          for (const [k, v] of Object.entries(raw)) {
            const s = typeof v === 'string' ? v.trim() : v;
            if (typeof s === 'string' && s.length === 0) continue;
            data[k] = s;
          }
          const statusEl = document.getElementById('aboutStatus');
          await saveAboutPartial(data, statusEl);
        });
      }

      // --- Blog page: hydrate, save, and image wiring ---
      const blogForm = document.getElementById('blogForm');

      // Convert plain text to simple HTML: paragraphs and lists
      function plaintextToHtml(text) {
        try {
          if (!text) return '';
          const hasTags = /<\s*\w+[^>]*>/.test(text); // already HTML
          if (hasTags) return text;
          const lines = String(text).replace(/\r\n/g, '\n').split('\n');
          const blocks = [];
          let listType = null; // 'ul' or 'ol'
          let listItems = [];
          function flushList(){
            if (listType && listItems.length){
              blocks.push(`<${listType}>` + listItems.map(li => `<li>${li}</li>`).join('') + `</${listType}>`);
            }
            listType = null; listItems = [];
          }
          for (const raw of lines){
            const line = raw.trim();
            if (!line){
              flushList();
              continue;
            }
            const mUl = /^[-*]\s+(.+)$/.exec(line);
            const mOl = /^(\d+)\.[)\s]+(.+)$/.exec(line);
            if (mUl){
              const item = mUl[1].trim();
              if (listType !== 'ul') { flushList(); listType = 'ul'; }
              listItems.push(item);
              continue;
            }
            if (mOl){
              const item = mOl[2].trim();
              if (listType !== 'ol') { flushList(); listType = 'ol'; }
              listItems.push(item);
              continue;
            }
            // paragraph line
            flushList();
            blocks.push(`<p>${line}</p>`);
          }
          flushList();
          // Merge adjacent paragraphs if needed; here we keep as-is
          return blocks.join('\n');
        } catch(_) { return text; }
      }

      async function saveBlogPartial(patch, statusEl) {
        try {
          statusEl && (statusEl.textContent = 'Saving...');
          const res = await fetch('/api/blog', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(patch || {})
          });
          if (res.status === 401 || res.status === 403) {
            statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
            setTimeout(() => { window.location.href = '/admin-login'; }, 800);
            return null;
          }
          if (!res.ok) throw new Error('Save failed: ' + res.status);
          const result = await res.json();
          statusEl && (statusEl.textContent = 'Saved');
          setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1200);
          showToast('Changes saved', 'success');
          return result;
        } catch (e) {
          console.error('[dashboard] blog partial save failed', e);
          statusEl && (statusEl.textContent = 'Error saving');
          showToast('Save failed', 'error');
          return null;
        }
      }

      async function hydrateBlogFromApi() {
        if (!blogForm) return;
        try {
          const res = await fetch('/api/blog', { credentials: 'same-origin' });
          if (!res.ok) return;
          const data = await res.json();
          const fields = blogForm.querySelectorAll('input[name], textarea[name]');
          fields.forEach(function(el){
            const key = el.getAttribute('name');
            if (!key) return;
            if (Object.prototype.hasOwnProperty.call(data, key)) {
              const val = data[key];
              el.value = (val != null ? String(val) : '');
            }
          });
          // Previews
          const heroPrev = document.getElementById('blogHeroBgPreview');
          if (heroPrev && data.heroBg) { heroPrev.src = data.heroBg; heroPrev.hidden = false; }
          for (let i = 1; i <= 12; i++) {
            const pv = document.getElementById(`post${i}ImagePreview`);
            const url = data[`post${i}Image`];
            if (pv && url) { pv.src = url; pv.hidden = false; }
          }
        } catch (e) {
          // silent
        }
      }

      // Wire blog image uploads (hero + posts)
      const blogHeroFile = document.getElementById('blogHeroBgFile');
      const blogHeroStatus = document.getElementById('blogHeroBgStatus');
      const blogHeroUrlInput = document.querySelector('#blogForm input[name="heroBg"]');
      const blogHeroPreview = document.getElementById('blogHeroBgPreview');
      if (blogForm) wireBlogImageField({ fileEl: blogHeroFile, urlInputEl: blogHeroUrlInput, previewEl: blogHeroPreview, statusEl: blogHeroStatus, payloadKey: 'heroBg' });

      for (let i = 1; i <= 12; i++) {
        const f = document.getElementById(`post${i}ImageFile`);
        const s = document.getElementById(`post${i}ImageStatus`);
        const u = document.querySelector(`#blogForm input[name="post${i}Image"]`);
        const p = document.getElementById(`post${i}ImagePreview`);
        if (blogForm) wireBlogImageField({ fileEl: f, urlInputEl: u, previewEl: p, statusEl: s, payloadKey: `post${i}Image` });
      }

      if (blogForm) {
        if (document.readyState === 'loading') {
          document.addEventListener('DOMContentLoaded', hydrateBlogFromApi);
        } else {
          hydrateBlogFromApi();
        }
        blogForm.addEventListener('submit', async function(ev){
          ev.preventDefault();
          const fd = new FormData(blogForm);
          const raw = Object.fromEntries(fd.entries());
          const data = {};
          for (const [k, v] of Object.entries(raw)) {
            const s = typeof v === 'string' ? v.trim() : v;
            if (typeof s === 'string' && s.length === 0) continue;
            if (/^post\d+Body$/.test(k)) {
              data[k] = plaintextToHtml(s);
            } else {
              data[k] = s;
            }
          }
          const statusEl = document.getElementById('blogStatus');
          await saveBlogPartial(data, statusEl);
        });
      }

      const btn = document.getElementById('logoutBtn');
      if (btn) {
        btn.addEventListener('click', async function(){
          try {
            await fetch('/api/auth/logout', { method: 'POST' });
            window.location.href = '/admin-login';
          } catch (e) {
            window.location.href = '/admin-login';
          }
        });
      }

      // Image upload helper
      async function uploadImage(file, statusEl){
        if (!file) return null;
        statusEl && (statusEl.textContent = 'Uploading...');
        try {
          const fd = new FormData();
          fd.append('file', file);
          const res = await fetch('/api/upload', { method: 'POST', credentials: 'same-origin', body: fd });
          if (!res.ok) throw new Error('Upload failed');
          if (res.status === 401 || res.status === 403) {
            statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
            setTimeout(() => { window.location.href = '/admin-login'; }, 800);
            return null;
          }
          const json = await res.json();
          statusEl && (statusEl.textContent = 'Uploaded');
          setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1200);
          showToast('Image uploaded', 'success');
          return json && json.url;
        } catch (e) {
          statusEl && (statusEl.textContent = 'Upload error');
          showToast('Upload failed', 'error');
          return null;
        }
      }

      // Blog: image wiring that saves to /api/blog
      function wireBlogImageField({ fileEl, urlInputEl, previewEl, statusEl, payloadKey }) {
        if (!fileEl || !urlInputEl) return;
        async function run() {
          const file = fileEl && fileEl.files && fileEl.files[0];
          if (!file) { statusEl && (statusEl.textContent = 'Choose an image first'); return; }
          const url = await uploadImage(file, statusEl);
          if (!url) return;
          urlInputEl.value = url;
          if (previewEl) { previewEl.src = url; previewEl.hidden = false; }
          console.log('[dashboard-blog] auto-saving', payloadKey, url);
          const saved = await saveBlogPartial({ [payloadKey]: url }, statusEl);
          console.log('[dashboard-blog] auto-save result', saved);
          const finalUrl = saved && saved[payloadKey] ? saved[payloadKey] : url;
          urlInputEl.value = finalUrl;
          if (previewEl) { previewEl.src = finalUrl; previewEl.hidden = false; }
        }
        fileEl.addEventListener('change', run);
      }

      // Generic image field wiring
      function wireImageField({ fileEl, urlInputEl, previewEl, statusEl, payloadKey }) {
        if (!fileEl || !urlInputEl) return;
        async function run() {
          const file = fileEl && fileEl.files && fileEl.files[0];
          if (!file) { statusEl && (statusEl.textContent = 'Choose an image first'); return; }
          const url = await uploadImage(file, statusEl);
          if (!url) return;
          urlInputEl.value = url;
          if (previewEl) { previewEl.src = url; previewEl.hidden = false; }
          console.log('[dashboard] auto-saving', payloadKey, url);
          const saved = await saveHomepagePartial({ [payloadKey]: url }, statusEl);
          console.log('[dashboard] auto-save result', saved);
          const finalUrl = saved && saved[payloadKey] ? saved[payloadKey] : url;
          urlInputEl.value = finalUrl;
          if (previewEl) { previewEl.src = finalUrl; previewEl.hidden = false; }
        }
        fileEl.addEventListener('change', run);
      }

      // Contact: image wiring that saves to /api/contact-page
      function wireContactImageField({ fileEl, urlInputEl, previewEl, statusEl, payloadKey }) {
        if (!fileEl || !urlInputEl) return;
        async function run() {
          const file = fileEl && fileEl.files && fileEl.files[0];
          if (!file) { statusEl && (statusEl.textContent = 'Choose an image first'); return; }
          const url = await uploadImage(file, statusEl);
          if (!url) return;
          urlInputEl.value = url;
          if (previewEl) { previewEl.src = url; previewEl.hidden = false; }
          console.log('[dashboard-contact] auto-saving', payloadKey, url);
          const saved = await saveContactPagePartial({ [payloadKey]: url }, statusEl);
          console.log('[dashboard-contact] auto-save result', saved);
          const finalUrl = saved && saved[payloadKey] ? saved[payloadKey] : url;
          urlInputEl.value = finalUrl;
          if (previewEl) { previewEl.src = finalUrl; previewEl.hidden = false; }
        }
        fileEl.addEventListener('change', run);
      }

      // Hero BG upload wiring
      const heroFile = document.getElementById('heroBgFile');
      const heroStatus = document.getElementById('heroBgUploadStatus');
      const heroUrlInput = document.querySelector('input[name="heroBg"]');
      const heroPreview = document.getElementById('heroBgPreview');
      wireImageField({ fileEl: heroFile, urlInputEl: heroUrlInput, previewEl: heroPreview, statusEl: heroStatus, payloadKey: 'heroBg' });

      // Who We Are image wiring
      const wwaFile = document.getElementById('whoWeAreImageFile');
      const wwaStatus = document.getElementById('whoWeAreImageStatus');
      const wwaUrlInput = document.querySelector('input[name="whoWeAreImage"]');
      const wwaPreview = document.getElementById('whoWeAreImagePreview');
      wireImageField({ fileEl: wwaFile, urlInputEl: wwaUrlInput, previewEl: wwaPreview, statusEl: wwaStatus, payloadKey: 'whoWeAreImage' });

      // Featured services image wiring
      for (let i = 1; i <= 4; i++) {
        const f = document.getElementById(`fs${i}ImageFile`);
        const s = document.getElementById(`fs${i}ImageStatus`);
        const u = document.querySelector(`input[name="featuredService${i}Image"]`);
        const p = document.getElementById(`fs${i}ImagePreview`);
        wireImageField({ fileEl: f, urlInputEl: u, previewEl: p, statusEl: s, payloadKey: `featuredService${i}Image` });
      }

      // Featured blog posts image wiring
      for (let i = 1; i <= 3; i++) {
        const f = document.getElementById(`blogFeat${i}ImageFile`);
        const s = document.getElementById(`blogFeat${i}ImageStatus`);
        const u = document.querySelector(`input[name="blogFeat${i}Image"]`);
        const p = document.getElementById(`blogFeat${i}ImagePreview`);
        wireImageField({ fileEl: f, urlInputEl: u, previewEl: p, statusEl: s, payloadKey: `blogFeat${i}Image` });
      }

      // --- Hydrate editor from current /api/homepage on page load ---
      // Do not overwrite once the user starts editing
      const form = document.getElementById('homepageForm');
      let userStartedEditing = false;
      if (form) {
        form.addEventListener('input', function onAnyInput(){ userStartedEditing = true; }, { once: true });
      }

      async function hydrateFromApi() {
        try {
          const res = await fetch('/api/homepage', { credentials: 'same-origin' });
          if (!res.ok) return;
          const hp = await res.json();
          if (!hp || userStartedEditing) return;

          // Populate all inputs/textareas that have matching keys
          const fields = form ? form.querySelectorAll('input[name], textarea[name]') : [];
          fields.forEach(function(el){
            const key = el.getAttribute('name');
            if (!key) return;
            if (Object.prototype.hasOwnProperty.call(hp, key)) {
              const val = hp[key];
              if (el.tagName === 'TEXTAREA') {
                el.value = (val != null ? String(val) : '');
              } else {
                el.value = (val != null ? String(val) : '');
              }
            }
          });

          // Update image previews if URLs are present
          function setPreview(previewEl, url) {
            if (!previewEl) return;
            if (url && String(url).trim().length) {
              previewEl.src = url;
              previewEl.hidden = false;
            }
          }

          setPreview(heroPreview, hp.heroBg);
          setPreview(wwaPreview, hp.whoWeAreImage);
          for (let i = 1; i <= 4; i++) {
            const url = hp[`featuredService${i}Image`];
            const pv = document.getElementById(`fs${i}ImagePreview`);
            setPreview(pv, url);
          }

          // Featured blog post images
          for (let i = 1; i <= 3; i++) {
            const bUrl = hp[`blogFeat${i}Image`];
            const bPv = document.getElementById(`blogFeat${i}ImagePreview`);
            setPreview(bPv, bUrl);
          }

          // No toast here to keep noise down; rely on visible fields updating
        } catch (e) {
          // Silent failure; editor still works with SSR values
        }
      }

      // Kick off hydration soon after load
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', hydrateFromApi);
      } else {
        hydrateFromApi();
      }
      // Helper: save partial homepage update
      async function saveHomepagePartial(patch, statusEl) {
        try {
          statusEl && (statusEl.textContent = 'Saving...');
          const res = await fetch('/api/homepage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(patch || {})
          });
          if (res.status === 401 || res.status === 403) {
            statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
            setTimeout(() => { window.location.href = '/admin-login'; }, 800);
            return null;
          }
          if (!res.ok) throw new Error('Save failed: ' + res.status);
          const result = await res.json();
          statusEl && (statusEl.textContent = 'Saved');
          setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1200);
          showToast('Changes saved', 'success');
          return result;
        } catch (e) {
          console.error('[dashboard] partial save failed', e);
          statusEl && (statusEl.textContent = 'Error saving');
          showToast('Save failed', 'error');
          return null;
        }
      }
      // Removed undefined handleHeroUploadFlow listener that caused a JS error

      // Homepage form
      // (form variable may already be defined above)
      if (form) {
        console.log('Homepage form found, adding submit handler');
        form.addEventListener('submit', async function(ev){
          ev.preventDefault();
          console.log('Form submitted, processing...');
          const fd = new FormData(form);
          const raw = Object.fromEntries(fd.entries());
          // Remove empty-string values so blanks don't wipe existing content
          const data = {};
          for (const [k, v] of Object.entries(raw)) {
            const s = typeof v === 'string' ? v.trim() : v;
            if (typeof s === 'string' && s.length === 0) continue;
            data[k] = s;
          }
          console.log('Form data (cleaned):', data);
          const statusEl = document.getElementById('homepageStatus');
          statusEl && (statusEl.textContent = 'Saving...');
          try {
            console.log('Sending POST to /api/homepage');
            const res = await fetch('/api/homepage', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'same-origin',
              body: JSON.stringify(data)
            });
            console.log('Response status:', res.status);
            if (res.status === 401 || res.status === 403) {
              statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
              setTimeout(() => { window.location.href = '/admin-login'; }, 800);
              return;
            }
            if (!res.ok) {
              const errorText = await res.text();
              console.error('Save failed:', errorText);
              throw new Error('Save failed: ' + res.status);
            }
            const result = await res.json();
            console.log('Save successful:', result);
            statusEl && (statusEl.textContent = 'Saved');
            setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1500);
            showToast('Homepage saved', 'success');
          } catch (e) {
            console.error('Error saving:', e);
            statusEl && (statusEl.textContent = 'Error saving: ' + e.message);
            showToast('Save failed', 'error');
          }
        });
      } else {
        // Removed console.log statement here
      }

      // --- Contact Page Editor wiring ---
      const contactForm = document.getElementById('contactPageForm');
      // Partial save for contact page
      async function saveContactPagePartial(patch, statusEl) {
        try {
          statusEl && (statusEl.textContent = 'Saving...');
          const res = await fetch('/api/contact-page', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            credentials: 'same-origin',
            body: JSON.stringify(patch || {})
          });
          if (res.status === 401 || res.status === 403) {
            statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
            setTimeout(() => { window.location.href = '/admin-login'; }, 800);
            return null;
          }
          if (!res.ok) throw new Error('Save failed: ' + res.status);
          const result = await res.json();
          statusEl && (statusEl.textContent = 'Saved');
          setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1200);
          showToast('Changes saved', 'success');
          return result;
        } catch (e) {
          console.error('[dashboard-contact] partial save failed', e);
          statusEl && (statusEl.textContent = 'Error saving');
          showToast('Save failed', 'error');
          return null;
        }
      }

      // Wire contact image uploads
      if (contactForm) {
        const cLeftFile = document.getElementById('contactLeftBgFile');
        const cLeftStatus = document.getElementById('contactLeftBgStatus');
        const cLeftUrlInput = contactForm.querySelector('input[name="leftBg"]');
        const cLeftPreview = document.getElementById('contactLeftBgPreview');
        wireContactImageField({ fileEl: cLeftFile, urlInputEl: cLeftUrlInput, previewEl: cLeftPreview, statusEl: cLeftStatus, payloadKey: 'leftBg' });
      }

      // Hydrate contact form from API
      async function hydrateContactFromApi() {
        if (!contactForm) return;
        try {
          const res = await fetch('/api/contact-page', { credentials: 'same-origin' });
          if (!res.ok) return;
          const data = await res.json();
          const fields = contactForm.querySelectorAll('input[name], textarea[name]');
          fields.forEach(function(el){
            const key = el.getAttribute('name');
            if (!key) return;
            if (Object.prototype.hasOwnProperty.call(data, key)) {
              const val = data[key];
              if (el.tagName === 'TEXTAREA') {
                el.value = (val != null ? String(val) : '');
              } else {
                el.value = (val != null ? String(val) : '');
              }
            }
          });
          // update previews
          const cLeftPreview2 = document.getElementById('contactLeftBgPreview');
          if (cLeftPreview2 && data.leftBg) { cLeftPreview2.src = data.leftBg; cLeftPreview2.hidden = false; }
        } catch (e) {
          // silent
        }
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', hydrateContactFromApi);
      } else {
        hydrateContactFromApi();
      }

      // Contact form submit
      if (contactForm) {
        contactForm.addEventListener('submit', async function(ev){
          ev.preventDefault();
          const fd = new FormData(contactForm);
          const raw = Object.fromEntries(fd.entries());
          const data = {};
          for (const [k, v] of Object.entries(raw)) {
            const s = typeof v === 'string' ? v.trim() : v;
            if (typeof s === 'string' && s.length === 0) continue;
            data[k] = s;
          }
          const statusEl = document.getElementById('contactPageStatus');
          statusEl && (statusEl.textContent = 'Saving...');
          try {
            const res = await fetch('/api/contact-page', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              credentials: 'same-origin',
              body: JSON.stringify(data)
            });
            if (res.status === 401 || res.status === 403) {
              statusEl && (statusEl.textContent = 'Session expired. Redirecting to login...');
              setTimeout(() => { window.location.href = '/admin-login'; }, 800);
              return;
            }
            if (!res.ok) throw new Error('Save failed: ' + res.status);
            await res.json();
            statusEl && (statusEl.textContent = 'Saved');
            setTimeout(() => { statusEl && (statusEl.textContent = ''); }, 1500);
            showToast('Contact page saved', 'success');
          } catch (e) {
            statusEl && (statusEl.textContent = 'Error saving: ' + e.message);
            showToast('Save failed', 'error');
          }
        });
      }
    })();
  </script>
</body>
</html>
